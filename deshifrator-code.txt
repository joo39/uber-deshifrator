




#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2); // адрес экрана, количество столбцов и строк

// Пины для кнопок и других компонентов
const int tonePin = 11;
const int potPin = A0;
const int selectB = 2;
const int clearB = 3;
const int setRotorB = 4;
const int backB = 5;
const int modeSwitchButton = 6; // Кнопка для переключения режимов

// Переменные для режимов
enum Mode { MODE_ENCRYPTION, MODE_MORSE_CODE, MODE_ROTOR };
Mode currentMode = MODE_ENCRYPTION;

// Переменные для режима роторного шифрования
char alphaValues[26] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
int rotor[3][26] = {
  { 5, 20, 19, 8, 7, 0, 21, 4, 3, 23, 11, 10, 25, 24, 15, 14, 22, 18, 17, 2, 1, 6, 16, 9, 13, 12 },
  { 20, 8, 11, 18, 12, 22, 23, 21, 1, 24, 17, 2, 4, 15, 25, 13, 19, 10, 3, 16, 0, 7, 5, 6, 9, 14 },
  { 9, 2, 1, 17, 22, 24, 16, 21, 15, 0, 23, 20, 14, 19, 12, 8, 6, 3, 25, 13, 11, 7, 4, 10, 5, 18 }
};
int reflector[26] = {9, 11, 8, 22, 14, 7, 21, 5, 2, 0, 20, 1, 17, 16, 4, 25, 13, 12, 23, 24, 10, 6, 3, 18, 19, 15};
int rotorPos[3] = {0, 0, 0};

// Переменные для режима Морзе
#define BUZZER_PIN 11
#define LED_PIN 7
#define CODE_BUTTON 3

bool codeButtonArmed;
bool codeButtonPressed;
unsigned long codeTime;
unsigned long startTime;
unsigned long lastButtonPressTime;
bool letterDecoded;
bool newWord;
unsigned long buttonPressTimes[5];
int bptIndex;

// Переменные для режима шифрования
const int button1Pin = 2; // Измените на нужные пины
const int button2Pin = 3;
const int button3Pin = 5;
const int button4Pin = 4;
const int shiftAmount = 3;
String inputText = "";

// Переменная для отслеживания текущей позиции в выводе
int counter = 0;

void setup() {
    pinMode(modeSwitchButton, INPUT);
    pinMode(selectB, INPUT);
    pinMode(potPin, INPUT);
    pinMode(clearB, INPUT);
    pinMode(setRotorB, INPUT);
    pinMode(backB, INPUT);
    pinMode(CODE_BUTTON, INPUT);
    pinMode(BUZZER_PIN, OUTPUT);
    pinMode(LED_PIN, OUTPUT);
    
    lcd.init();
    lcd.backlight();
    lcd.print("Mode: Caesar");
}

void loop() {
    // Переключение режимов
    if (digitalRead(modeSwitchButton) == HIGH) {
        delay(200); // Дебаунс
        currentMode = static_cast<Mode>((currentMode + 1) % 3); // Переключение между 3 режимами
        updateDisplay();
    }

    switch (currentMode) {
        case MODE_ENCRYPTION:
            handleEncryptionMode();
            break;
        case MODE_MORSE_CODE:
            handleMorseCodeMode();
            break;
        case MODE_ROTOR:
            handleRotorMode();
            break;
    }
}

void updateDisplay() {
    lcd.clear();
    switch (currentMode) {
        case MODE_ENCRYPTION:
            lcd.print("Mode: Caesar");
            midiEncryption(); // Вызов функции для режима шифрования
            break;
        case MODE_MORSE_CODE:
            lcd.print("Mode: Morse Code");
            midiMorse(); // Вызов функции для режима Морзе
            break;
        case MODE_ROTOR:
            lcd.print("Mode: Enigma");
            midiRotor(); // Вызов функции для режима роторного шифрования
            break;
    }
}

// Обработка режима шифрования
void handleEncryptionMode() {
    int potValue = analogRead(potPin);
    char inputChar = map(potValue, 1010, 475, 'A', 'Z'); // Map potentiometer value to letter A-Z

    if (digitalRead(button1Pin) == HIGH) {
        inputText.concat(inputChar);
        lcd.print(inputChar);
        delay(500);
    }

    if (digitalRead(button2Pin) == HIGH) {
        inputText = "";
        lcd.clear();
        lcd.print("Enter:");
        delay(500);
    }

    if (digitalRead(button3Pin) == HIGH) {
        encryptText(inputText);
        delay(2000);
        inputText = "";
        lcd.clear();
        lcd.print("Enter:");
    }

    if (digitalRead(button4Pin) == HIGH && inputText.length() > 0) {
        inputText.remove(inputText.length() - 1);
        lcd.clear();
        lcd.print(inputText);
        delay(500);
    }
}

void encryptText(String text) {
    String result = "";
    for (int i = 0; i < text.length(); i++) {
        char currentChar = text.charAt(i);
        int shiftedChar = currentChar + shiftAmount;
        if (shiftedChar > 'Z') {
            shiftedChar = shiftedChar - 26;
        }
        result += (char)shiftedChar;
    }
    lcd.clear();
    lcd.print("Original: " + text);
    lcd.setCursor(0, 1);
    lcd.print("Encrypted: " + result);
}

// Обработка режима Морзе
void handleMorseCodeMode() {
    scanButtons();
    if (millis() - lastButtonPressTime > 1600 && newWord == true) {
        Serial.println("New word");
        lcd.setCursor(0, 1);
        lcd.print(" ");
        newWord = false;
    } else if (millis() - lastButtonPressTime > 600 && letterDecoded == false) {
        decodeButtonPresses();
        letterDecoded = true;
    }
}

void scanButtons() {
    if (!codeButtonArmed && digitalRead(CODE_BUTTON) == HIGH) {
        codeButtonArmed = true;
        startTime = millis();
        lastButtonPressTime = startTime;
        codeTime = 0;
        letterDecoded = false;
        newWord = true;
    }
    if (digitalRead(CODE_BUTTON) == HIGH) {
        codeButtonPressed = true;
        codeButtonDown();
    }
    if (codeButtonPressed && digitalRead(CODE_BUTTON) == LOW) {
        codeButtonPressed = false;
        codeButtonReleased();
        codeButtonArmed = false;
    }
}

void codeButtonDown() {
    tone(BUZZER_PIN, 440, 10);
    digitalWrite(LED_PIN, HIGH);
    codeTime = millis() - startTime;
}

void codeButtonReleased() {
    digitalWrite(LED_PIN, LOW);
    if (codeTime > 25) {
        Serial.print("Code time: ");
        Serial.print(codeTime);
        Serial.println(" milliseconds");
        buttonPressTimes[bptIndex] = codeTime;
        bptIndex++;
        if (bptIndex == 5) {
            for (int i = 0; i < 5; i++) {
                buttonPressTimes[i] = 0;
            }
            bptIndex = 0; // Сброс индекса после заполнения
        }
    }
}

void decodeButtonPresses() {
    Serial.print("DECODE LETTER: ");
    for (int i = 0; i < bptIndex; i++) {
        if (isDot(buttonPressTimes[i]))
            Serial.print(" DOT ");
        else if (isDash(buttonPressTimes[i]))
            Serial.print(" DASH");
    }
    Serial.print(" ");
    char c = decodeMsg();
    Serial.print(c);
    Serial.println();
    lcd.print(c);
    bptIndex = 0;
    for (int i = 0; i < 5; i++) {
        buttonPressTimes[i] = 0;
    }
}

bool isDot(unsigned long t) {
    return (t >= 40 && t <= 180); // Установите свои значения
}

bool isDash(unsigned long t) {
    return (t > 180); // Установите свои значения
}

char decodeMsg() {
    char c = '?';
    // Логика декодирования
    if( isDot(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && buttonPressTimes[2] == 0 )
c = 'A';
else if( isDash(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'B';
else if( isDash(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'C';
else if( isDash(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && buttonPressTimes[3]== 0 )
c = 'D';
else if( isDot(buttonPressTimes[0]) && buttonPressTimes[1] == 0 )
c = 'E';
else if( isDot(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'F';
else if( isDash(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && buttonPressTimes[3]== 0 )
c = 'G';
else if( isDot(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'H';
else if( isDot(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && buttonPressTimes[2]== 0 )
c = 'I';
else if( isDot(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && isDash(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'J';
else if( isDash(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && buttonPressTimes[3]== 0 )
c = 'K';
else if( isDot(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'L';
else if( isDash(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && buttonPressTimes[2]== 0 )
c = 'M';
else if( isDash(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && buttonPressTimes[2]== 0 )
c = 'N';
else if( isDash(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && buttonPressTimes[3]== 0 )
c = 'O';
else if( isDot(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'P';
else if( isDash(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDash(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'Q';
else if( isDot(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && buttonPressTimes[3]== 0 )
c = 'R';
else if( isDot(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && buttonPressTimes[3]== 0 )
c = 'S';
else if( isDash(buttonPressTimes[0]) && buttonPressTimes[1]== 0 )
c = 'T';
else if( isDot(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && buttonPressTimes[3]== 0 )
c = 'U';
else if( isDot(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDash(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'V';
else if( isDot(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && buttonPressTimes[3]== 0 )
c = 'W';
else if( isDash(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDash(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'X';
else if( isDash(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && isDash(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'Y';
else if( isDash(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && buttonPressTimes[4]== 0 )
c = 'Z';
else if( isDot(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && isDash(buttonPressTimes[3]) && isDash(buttonPressTimes[4]))
c = '1';
else if( isDot(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && isDash(buttonPressTimes[3]) && isDash(buttonPressTimes[4]))
c = '2';
else if( isDot(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDash(buttonPressTimes[3]) && isDash(buttonPressTimes[4]))
c = '3';
else if( isDot(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && isDash(buttonPressTimes[4]))
c = '4';
else if( isDot(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && isDot(buttonPressTimes[4]))
c = '5';
else if( isDash(buttonPressTimes[0]) && isDot(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && isDot(buttonPressTimes[4]))
c = '6';
else if( isDash(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDot(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && isDot(buttonPressTimes[4]))
c = '7';
else if( isDash(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && isDot(buttonPressTimes[3]) && isDot(buttonPressTimes[4]))
c = '8';
else if( isDash(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && isDash(buttonPressTimes[3]) && isDot(buttonPressTimes[4]))
c = '9';
else if( isDash(buttonPressTimes[0]) && isDash(buttonPressTimes[1]) && isDash(buttonPressTimes[2]) && isDash(buttonPressTimes[3]) && isDash(buttonPressTimes[4]))
c = '0';
    return c; // Вернуть символ по умолчанию
}

// Обработка режима роторного шифрования
void handleRotorMode() {
    printRotors();
    int potIn = map(analogRead(potPin), 900, 700, 0, 25); // Изменено на 700 для полного диапазона
    potIn = constrain(potIn, 0, 25);
    lcd.setCursor(0, 0);
    lcd.print(alphaValues[potIn]); // Показать выбранную букву
    lcd.print(" ");
    if (potIn < 10) { lcd.print("0"); }
    lcd.print(potIn);

    if (digitalRead(selectB) == HIGH) {
        lcd.setCursor(counter, 1);
        lcd.print(alphaValues[enigma(potIn)]);
        counter++;
        while (digitalRead(selectB) != LOW) {
            delay(100);
        }
    }

    if (digitalRead(clearB) == HIGH) {
        clearScrn();
        while (digitalRead(clearB) != LOW) {
            delay(100);
        }
    }

    if (digitalRead(setRotorB) == HIGH) {
        setRotorPos();
        while (digitalRead(setRotorB) != LOW) {
            delay(100);
        }
    }

    if (digitalRead(backB) == HIGH && counter >= 1) {
        counter--;
        lcd.setCursor(counter, 1);
        lcd.print(" ");
        rotorPos[0] -= 1;
        if (rotorPos[0] < 0) {
            rotorPos[1] -= 1;
            rotorPos[0] = 25; // Убедитесь, что значение в пределах 0-25
            if (rotorPos[1] < 0) {
                rotorPos[2] -= 1;
                rotorPos[1] = 25; // Убедитесь, что значение в пределах 0-25
                if (rotorPos[2] < 0) {
                    rotorPos[2] = 25; // Убедитесь, что значение в пределах 0-25
                }
            }
        }
        while (digitalRead(backB) != LOW) {
            delay(100);
        }
    }
}

void clearScrn() {
    lcd.clear();
    counter = 0;
}

void printRotors() {
    for (int i = 2; i >= 0; i--) {
        lcd.setCursor(14 - 3 * i, 0);
        if (rotorPos[i] < 10) { lcd.print("0"); }
        lcd.print(rotorPos[i]);
        lcd.print("/");
    }
}

void setRotorPos() {
    clearScrn();
    printRotors();
    int potIn; // Объявляем переменную potIn здесь
    for (int i = 2; i >= 0; i--) {
        while (digitalRead(selectB) != HIGH) {
            potIn = map(analogRead(potPin), 900, 700, 0, 25); // Изменено на 700 для полного диапазона
            potIn = constrain(potIn, 0, 25);
            lcd.setCursor(14 - 3 * i, 0);
            if (potIn < 10) { lcd.print("0"); }
            lcd.print(potIn);
            delay(10);
        }
        rotorPos[i] = potIn; // Устанавливаем значение ротора
        while (digitalRead(selectB) != LOW) {
            delay(100);
        }
    }
}

int enigma(int inLetterVal) {
    // Прямой проход через роторы
    for (int i = 0; i <= 2; i++) {
        inLetterVal += rotorPos[i];
        while (inLetterVal >= 26) inLetterVal -= 26; // Убедитесь, что значение не превышает 25
        inLetterVal = rotor[i][inLetterVal];
    }
    // Рефлектор
    inLetterVal = reflector[inLetterVal];
    // Возврат через роторы
    for (int i = 2; i >= 0; i--) {
        inLetterVal = rotor[i][inLetterVal];
        inLetterVal -= rotorPos[i];
        while (inLetterVal < 0) inLetterVal += 26; // Убедитесь, что значение не меньше 0
    }

    // Поворот роторов
    rotorPos[0] += 1;
    if (rotorPos[0] >= 26) {
        rotorPos[1] += 1;
        rotorPos[0] = 0;
        if (rotorPos[1] >= 26) {
            rotorPos[2] += 1;
            rotorPos[1] = 0;
            if (rotorPos[2] >= 26) {
                rotorPos[2] = 0;
            }
        }
    }

    return inLetterVal;
}

// Функции для воспроизведения музыки
void midiEncryption() {
    tone(tonePin, 293, 195); // Замените код 1 на нужные ноты
    delay(217);
    tone(tonePin, 440, 195);
    delay(217);
    tone(tonePin, 440, 195);
    delay(217);
    tone(tonePin, 391, 97);
    delay(108);
    tone(tonePin, 349, 97);
    delay(108);
    tone(tonePin, 391, 195);
    delay(217);
    tone(tonePin, 349, 97);
    delay(108);
    tone(tonePin, 329, 97);
    delay(108);
    tone(tonePin, 349, 97);
    delay(108);
    tone(tonePin, 329, 97);
    delay(108);
    tone(tonePin, 261, 195);
    delay(217);
    tone(tonePin, 293, 195);
    delay(217);
    tone(tonePin, 440, 195);
    delay(217);
    tone(tonePin, 440, 195);
    delay(217);
    tone(tonePin, 391, 97);
    delay(108);
    tone(tonePin, 349, 97);
    delay(108);
    tone(tonePin, 391, 195);
    delay(217);
    tone(tonePin, 349, 97);
    delay(108);
    tone(tonePin, 329, 97);
    delay(108);
    tone(tonePin, 349, 97);
    delay(108);
    tone(tonePin, 329, 97);
    delay(108);
    tone(tonePin, 261, 97);
    delay(108);
    tone(tonePin, 293, 97);
    delay(108);
    tone(tonePin, 293, 195);
    delay(217);
    tone(tonePin, 440, 195);
    delay(217);
    tone(tonePin, 440, 195);
    delay(217);
    tone(tonePin, 391, 97);
    delay(108);
    tone(tonePin, 349, 97);
    delay(108);
    tone(tonePin, 391, 195);
    delay(217);
    tone(tonePin, 349, 97);
    delay(108);
    tone(tonePin, 329, 97);
    delay(108);
    tone(tonePin, 349, 97);
    delay(108);
    tone(tonePin, 329, 97);
    delay(108);
    tone(tonePin, 261, 97);
    delay(108);
    tone(tonePin, 261, 97);
}

void midiMorse() {
    tone(tonePin, 987, 61); // Замените код 2 на нужные ноты
    delay(67);
    delay(67);
    tone(tonePin, 987, 69);
    delay(77);
    delay(77);
    tone(tonePin, 987, 61);
    delay(67);
    delay(174);
    tone(tonePin, 987, 183);
    delay(203);
    delay(77);
    tone(tonePin, 987, 174);
    delay(193);
    delay(77);
    tone(tonePin, 987, 174);
    delay(193);
    delay(174);
    tone(tonePin, 987, 61);
    delay(67);
    delay(77);
    tone(tonePin, 987, 69);
    delay(77);
    delay(77);
    tone(tonePin, 987, 61);
    delay(67);
}

void midiRotor() {
    delay(227); // Замените код 3 на нужные ноты
    tone(tonePin, 1174, 204);
    delay(227);
    tone(tonePin, 1174, 204);
    delay(227);
    tone(tonePin, 987, 204);
    delay(227);
    tone(tonePin, 1046, 409);
    delay(454);
    tone(tonePin, 880, 306);
    delay(340);
    tone(tonePin, 783, 102);
    delay(113);
    tone(tonePin, 880, 204);
    delay(227);
    tone(tonePin, 1174, 204);
    delay(227);
    tone(tonePin, 1174, 204);
    delay(227);
    tone(tonePin, 1046, 204);
    delay(227);
    tone(tonePin, 987, 204);
    delay(227);
    tone(tonePin, 1174, 204);
    delay(227);
    tone(tonePin, 1174, 102);
    delay(113);
    tone(tonePin, 1046, 102);
    delay(113);
    tone(tonePin, 987, 204);
    delay(227);
    tone(tonePin, 1046, 409);
    delay(454);
    tone(tonePin, 880, 409);
    delay(454);
    tone(tonePin, 987, 204);
    delay(227);
    tone(tonePin, 783, 204);
    delay(227);
    tone(tonePin, 880, 818);
    delay(909);
    delay(227);
}
